{
  "address": "0xc5c3a83e9139cc50402caE04f335EA6B04c232b9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x78fb5a3a399a3fe5a98f8bfda77c6f55829dc9d25f05e9158e25c1f6113ea777",
  "receipt": {
    "to": null,
    "from": "0xffd3452eFa0eda06F8F1F7e2442C3E075905AE3e",
    "contractAddress": "0xc5c3a83e9139cc50402caE04f335EA6B04c232b9",
    "transactionIndex": 32,
    "gasUsed": "877979",
    "logsBloom": "0x
    "blockHash": "0x82200e5f38c22a48f87b8c5e00d56c48c3842b0f103ca1d3558d0eee5351df17",
    "transactionHash": "0x78fb5a3a399a3fe5a98f8bfda77c6f55829dc9d25f05e9158e25c1f6113ea777",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 28831745,
        "transactionHash": "0x78fb5a3a399a3fe5a98f8bfda77c6f55829dc9d25f05e9158e25c1f6113ea777",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ffd3452efa0eda06f8f1f7e2442c3e075905ae3e",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004adc69facda9b00000000000000000000000000000000000000000000000002732a5cc3c832940000000000000000000000000000000000000000000008545b10ed1d5abc0899000000000000000000000000000000000000000000000000026e7c96241b57f90000000000000000000000000000000000000000000008545b159ae3fa68e334",
        "logIndex": 134,
        "blockHash": "0x82200e5f38c22a48f87b8c5e00d56c48c3842b0f103ca1d3558d0eee5351df17"
      }
    ],
    "blockNumber": 28831745,
    "cumulativeGasUsed": "6448637",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "777d0f7041d37ef42acce7ae102d0794",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"params\":{\"functionSignature\":\"Signature of the actual function to be called via meta transaction\",\"sigR\":\"R part of the signature\",\"sigS\":\"S part of the signature\",\"sigV\":\"V part of the signature\",\"userAddress\":\"Address of user trying to do meta transaction\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"notice\":\"Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasicMetaTransaction.sol\":\"BasicMetaTransaction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/BasicMetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract BasicMetaTransaction {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(address => uint256) private nonces;\\r\\n\\r\\n    function getChainID() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Main function to be called when user wants to execute meta transaction.\\r\\n     * The actual function to be called should be passed as param with name functionSignature\\r\\n     * Here the basic signature recovery is being used. Signature is expected to be generated using\\r\\n     * personal_sign method.\\r\\n     * @param userAddress Address of user trying to do meta transaction\\r\\n     * @param functionSignature Signature of the actual function to be called via meta transaction\\r\\n     * @param sigR R part of the signature\\r\\n     * @param sigS S part of the signature\\r\\n     * @param sigV V part of the signature\\r\\n     */\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public payable returns (bytes memory) {\\r\\n        require(\\r\\n            verify(\\r\\n                userAddress,\\r\\n                nonces[userAddress],\\r\\n                getChainID(),\\r\\n                functionSignature,\\r\\n                sigR,\\r\\n                sigS,\\r\\n                sigV\\r\\n            ),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n        nonces[userAddress] = nonces[userAddress].add(1);\\r\\n\\r\\n        // Append userAddress at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(\\r\\n            abi.encodePacked(functionSignature, userAddress)\\r\\n        );\\r\\n\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            payable(msg.sender),\\r\\n            functionSignature\\r\\n        );\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) external view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address owner,\\r\\n        uint256 nonce,\\r\\n        uint256 chainID,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash = prefixed(\\r\\n            keccak256(abi.encodePacked(nonce, this, chainID, functionSignature))\\r\\n        );\\r\\n        address signer = ecrecover(hash, sigV, sigR, sigS);\\r\\n        require(signer != address(0), \\\"Invalid signature\\\");\\r\\n        return (owner == signer);\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            return msg.sender;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2af4a5d8519b3b23c79000ef2ba6851a36ec99490e27a42687b7aeec52aa7d95\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ef8806100206000396000f3fe60806040526004361061003f5760003560e01c80630c53c51c146100445780632d0335ab14610074578063564b81ef146100b15780636281133d146100dc575b600080fd5b61005e60048036038101906100599190610616565b610119565b60405161006b9190610a54565b60405180910390f35b34801561008057600080fd5b5061009b600480360381019061009691906105ed565b61035b565b6040516100a89190610ad6565b60405180910390f35b3480156100bd57600080fd5b506100c66103a3565b6040516100d39190610ad6565b60405180910390f35b3480156100e857600080fd5b5061010360048036038101906100fe91906106a5565b6103b0565b60405161011091906109f4565b60405180910390f35b606061016f866000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101666103a3565b888888886103b0565b6101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590610ab6565b60405180910390fd5b61020060016000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104eb90919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000803073ffffffffffffffffffffffffffffffffffffffff16878960405160200161026f92919061091e565b60405160208183030381529060405260405161028b9190610907565b6000604051808303816000865af19150503d80600081146102c8576040519150601f19603f3d011682016040523d82523d6000602084013e6102cd565b606091505b509150915081610312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030990610a76565b60405180910390fd5b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b883389604051610345939291906109b6565b60405180910390a1809250505095945050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000804690508091505090565b6000806103e8883089896040516020016103cd949392919061096c565b60405160208183030381529060405280519060200120610501565b905060006001828588886040516000815260200160405260405161040f9493929190610a0f565b6020604051602081039080840390855afa158015610431573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a490610a96565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161492505050979650505050505050565b600081836104f99190610b8a565b905092915050565b6000816040516020016105149190610946565b604051602081830303815290604052805190602001209050919050565b600061054461053f84610b16565b610af1565b90508281526020810184848401111561055c57600080fd5b610567848285610c75565b509392505050565b60008135905061057e81610e66565b92915050565b60008135905061059381610e7d565b92915050565b600082601f8301126105aa57600080fd5b81356105ba848260208601610531565b91505092915050565b6000813590506105d281610e94565b92915050565b6000813590506105e781610eab565b92915050565b6000602082840312156105ff57600080fd5b600061060d8482850161056f565b91505092915050565b600080600080600060a0868803121561062e57600080fd5b600061063c8882890161056f565b955050602086013567ffffffffffffffff81111561065957600080fd5b61066588828901610599565b945050604061067688828901610584565b935050606061068788828901610584565b9250506080610698888289016105d8565b9150509295509295909350565b600080600080600080600060e0888a0312156106c057600080fd5b60006106ce8a828b0161056f565b97505060206106df8a828b016105c3565b96505060406106f08a828b016105c3565b955050606088013567ffffffffffffffff81111561070d57600080fd5b6107198a828b01610599565b945050608061072a8a828b01610584565b93505060a061073b8a828b01610584565b92505060c061074c8a828b016105d8565b91505092959891949750929550565b61076481610bf2565b82525050565b61077381610be0565b82525050565b61078a61078582610be0565b610ce8565b82525050565b61079981610c04565b82525050565b6107a881610c10565b82525050565b6107bf6107ba82610c10565b610cfa565b82525050565b60006107d082610b47565b6107da8185610b52565b93506107ea818560208601610c84565b6107f381610d7e565b840191505092915050565b600061080982610b47565b6108138185610b63565b9350610823818560208601610c84565b80840191505092915050565b61084061083b82610c51565b610ce8565b82525050565b6000610853601c83610b7f565b915061085e82610d9c565b601c82019050919050565b6000610876601c83610b6e565b915061088182610dc5565b602082019050919050565b6000610899601183610b6e565b91506108a482610dee565b602082019050919050565b60006108bc602183610b6e565b91506108c782610e17565b604082019050919050565b6108db81610c3a565b82525050565b6108f26108ed82610c3a565b610d16565b82525050565b61090181610c44565b82525050565b600061091382846107fe565b915081905092915050565b600061092a82856107fe565b91506109368284610779565b6014820191508190509392505050565b600061095182610846565b915061095d82846107ae565b60208201915081905092915050565b600061097882876108e1565b602082019150610988828661082f565b60148201915061099882856108e1565b6020820191506109a882846107fe565b915081905095945050505050565b60006060820190506109cb600083018661076a565b6109d8602083018561075b565b81810360408301526109ea81846107c5565b9050949350505050565b6000602082019050610a096000830184610790565b92915050565b6000608082019050610a24600083018761079f565b610a3160208301866108f8565b610a3e604083018561079f565b610a4b606083018461079f565b95945050505050565b60006020820190508181036000830152610a6e81846107c5565b905092915050565b60006020820190508181036000830152610a8f81610869565b9050919050565b60006020820190508181036000830152610aaf8161088c565b9050919050565b60006020820190508181036000830152610acf816108af565b9050919050565b6000602082019050610aeb60008301846108d2565b92915050565b6000610afb610b0c565b9050610b078282610cb7565b919050565b6000604051905090565b600067ffffffffffffffff821115610b3157610b30610d4f565b5b610b3a82610d7e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000610b9582610c3a565b9150610ba083610c3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bd557610bd4610d20565b5b828201905092915050565b6000610beb82610c1a565b9050919050565b6000610bfd82610c1a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610c5c82610c63565b9050919050565b6000610c6e82610c1a565b9050919050565b82818337600083830152505050565b60005b83811015610ca2578082015181840152602081019050610c87565b83811115610cb1576000848401525b50505050565b610cc082610d7e565b810181811067ffffffffffffffff82111715610cdf57610cde610d4f565b5b80604052505050565b6000610cf382610d04565b9050919050565b6000819050919050565b6000610d0f82610d8f565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000600082015250565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b610e6f81610be0565b8114610e7a57600080fd5b50565b610e8681610c10565b8114610e9157600080fd5b50565b610e9d81610c3a565b8114610ea857600080fd5b50565b610eb481610c44565b8114610ebf57600080fd5b5056fea26469706673582212205ab21b38435f70fb839880f00c0588b46e085f6cf575688c41475fef6116f00d64736f6c63430008020033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80630c53c51c146100445780632d0335ab14610074578063564b81ef146100b15780636281133d146100dc575b600080fd5b61005e60048036038101906100599190610616565b610119565b60405161006b9190610a54565b60405180910390f35b34801561008057600080fd5b5061009b600480360381019061009691906105ed565b61035b565b6040516100a89190610ad6565b60405180910390f35b3480156100bd57600080fd5b506100c66103a3565b6040516100d39190610ad6565b60405180910390f35b3480156100e857600080fd5b5061010360048036038101906100fe91906106a5565b6103b0565b60405161011091906109f4565b60405180910390f35b606061016f866000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101666103a3565b888888886103b0565b6101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590610ab6565b60405180910390fd5b61020060016000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104eb90919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000803073ffffffffffffffffffffffffffffffffffffffff16878960405160200161026f92919061091e565b60405160208183030381529060405260405161028b9190610907565b6000604051808303816000865af19150503d80600081146102c8576040519150601f19603f3d011682016040523d82523d6000602084013e6102cd565b606091505b509150915081610312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030990610a76565b60405180910390fd5b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b883389604051610345939291906109b6565b60405180910390a1809250505095945050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000804690508091505090565b6000806103e8883089896040516020016103cd949392919061096c565b60405160208183030381529060405280519060200120610501565b905060006001828588886040516000815260200160405260405161040f9493929190610a0f565b6020604051602081039080840390855afa158015610431573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a490610a96565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161492505050979650505050505050565b600081836104f99190610b8a565b905092915050565b6000816040516020016105149190610946565b604051602081830303815290604052805190602001209050919050565b600061054461053f84610b16565b610af1565b90508281526020810184848401111561055c57600080fd5b610567848285610c75565b509392505050565b60008135905061057e81610e66565b92915050565b60008135905061059381610e7d565b92915050565b600082601f8301126105aa57600080fd5b81356105ba848260208601610531565b91505092915050565b6000813590506105d281610e94565b92915050565b6000813590506105e781610eab565b92915050565b6000602082840312156105ff57600080fd5b600061060d8482850161056f565b91505092915050565b600080600080600060a0868803121561062e57600080fd5b600061063c8882890161056f565b955050602086013567ffffffffffffffff81111561065957600080fd5b61066588828901610599565b945050604061067688828901610584565b935050606061068788828901610584565b9250506080610698888289016105d8565b9150509295509295909350565b600080600080600080600060e0888a0312156106c057600080fd5b60006106ce8a828b0161056f565b97505060206106df8a828b016105c3565b96505060406106f08a828b016105c3565b955050606088013567ffffffffffffffff81111561070d57600080fd5b6107198a828b01610599565b945050608061072a8a828b01610584565b93505060a061073b8a828b01610584565b92505060c061074c8a828b016105d8565b91505092959891949750929550565b61076481610bf2565b82525050565b61077381610be0565b82525050565b61078a61078582610be0565b610ce8565b82525050565b61079981610c04565b82525050565b6107a881610c10565b82525050565b6107bf6107ba82610c10565b610cfa565b82525050565b60006107d082610b47565b6107da8185610b52565b93506107ea818560208601610c84565b6107f381610d7e565b840191505092915050565b600061080982610b47565b6108138185610b63565b9350610823818560208601610c84565b80840191505092915050565b61084061083b82610c51565b610ce8565b82525050565b6000610853601c83610b7f565b915061085e82610d9c565b601c82019050919050565b6000610876601c83610b6e565b915061088182610dc5565b602082019050919050565b6000610899601183610b6e565b91506108a482610dee565b602082019050919050565b60006108bc602183610b6e565b91506108c782610e17565b604082019050919050565b6108db81610c3a565b82525050565b6108f26108ed82610c3a565b610d16565b82525050565b61090181610c44565b82525050565b600061091382846107fe565b915081905092915050565b600061092a82856107fe565b91506109368284610779565b6014820191508190509392505050565b600061095182610846565b915061095d82846107ae565b60208201915081905092915050565b600061097882876108e1565b602082019150610988828661082f565b60148201915061099882856108e1565b6020820191506109a882846107fe565b915081905095945050505050565b60006060820190506109cb600083018661076a565b6109d8602083018561075b565b81810360408301526109ea81846107c5565b9050949350505050565b6000602082019050610a096000830184610790565b92915050565b6000608082019050610a24600083018761079f565b610a3160208301866108f8565b610a3e604083018561079f565b610a4b606083018461079f565b95945050505050565b60006020820190508181036000830152610a6e81846107c5565b905092915050565b60006020820190508181036000830152610a8f81610869565b9050919050565b60006020820190508181036000830152610aaf8161088c565b9050919050565b60006020820190508181036000830152610acf816108af565b9050919050565b6000602082019050610aeb60008301846108d2565b92915050565b6000610afb610b0c565b9050610b078282610cb7565b919050565b6000604051905090565b600067ffffffffffffffff821115610b3157610b30610d4f565b5b610b3a82610d7e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000610b9582610c3a565b9150610ba083610c3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bd557610bd4610d20565b5b828201905092915050565b6000610beb82610c1a565b9050919050565b6000610bfd82610c1a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610c5c82610c63565b9050919050565b6000610c6e82610c1a565b9050919050565b82818337600083830152505050565b60005b83811015610ca2578082015181840152602081019050610c87565b83811115610cb1576000848401525b50505050565b610cc082610d7e565b810181811067ffffffffffffffff82111715610cdf57610cde610d4f565b5b80604052505050565b6000610cf382610d04565b9050919050565b6000819050919050565b6000610d0f82610d8f565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000600082015250565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b610e6f81610be0565b8114610e7a57600080fd5b50565b610e8681610c10565b8114610e9157600080fd5b50565b610e9d81610c3a565b8114610ea857600080fd5b50565b610eb481610c44565b8114610ebf57600080fd5b5056fea26469706673582212205ab21b38435f70fb839880f00c0588b46e085f6cf575688c41475fef6116f00d64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "params": {
          "functionSignature": "Signature of the actual function to be called via meta transaction",
          "sigR": "R part of the signature",
          "sigS": "S part of the signature",
          "sigV": "V part of the signature",
          "userAddress": "Address of user trying to do meta transaction"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "notice": "Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 329,
        "contract": "contracts/BasicMetaTransaction.sol:BasicMetaTransaction",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}