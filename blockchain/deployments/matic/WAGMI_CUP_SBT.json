{
  "address": "0xF29a58240dd582CCB42D3d99aE08315dfC3B6069",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "SBT_ID",
          "type": "uint256"
        }
      ],
      "name": "SBT_burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "SBT_ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "SBT_mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SBT_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sbtId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "Title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "SbtCategory",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "DateOfIssue",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "DeSocMembershipStatus",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "REPTokens",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "RepTokenStatus",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "Issuer",
              "type": "string"
            },
            {
              "internalType": "uint16",
              "name": "RunsScored",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "WicketsTaken",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "NoOfCatches",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "NoOfRunOuts",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "NoOfStumpings",
              "type": "uint16"
            }
          ],
          "internalType": "struct WAGMI_CUP_SBT.sbt",
          "name": "_sbt",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "rep",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sbtInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "Title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "SbtCategory",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "DateOfIssue",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "DeSocMembershipStatus",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "REPTokens",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "RepTokenStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "Issuer",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "RunsScored",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "WicketsTaken",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "NoOfCatches",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "NoOfRunOuts",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "NoOfStumpings",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userSbtID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userSbtInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "Title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "SbtCategory",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "DateOfIssue",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "DeSocMembershipStatus",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "REPTokens",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "RepTokenStatus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "Issuer",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "RunsScored",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "WicketsTaken",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "NoOfCatches",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "NoOfRunOuts",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "NoOfStumpings",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a61ec87f89bf2dd079a188d839730995dcb86c6386cabf1f83452f954339c5a",
  "receipt": {
    "to": null,
    "from": "0xffd3452eFa0eda06F8F1F7e2442C3E075905AE3e",
    "contractAddress": "0xF29a58240dd582CCB42D3d99aE08315dfC3B6069",
    "transactionIndex": 21,
    "gasUsed": "3715939",
    "logsBloom": "0x
    "blockHash": "0x7fe7132dd112d8e287ceefb4c1c25689fb37f195fed87f4df0417ab421b397a0",
    "transactionHash": "0x9a61ec87f89bf2dd079a188d839730995dcb86c6386cabf1f83452f954339c5a",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 28820366,
        "transactionHash": "0x9a61ec87f89bf2dd079a188d839730995dcb86c6386cabf1f83452f954339c5a",
        "address": "0xF29a58240dd582CCB42D3d99aE08315dfC3B6069",
        "topics": [
          "0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6",
          "0x000000000000000000000000ffd3452efa0eda06f8f1f7e2442c3e075905ae3e"
        ],
        "data": "0x",
        "logIndex": 221,
        "blockHash": "0x7fe7132dd112d8e287ceefb4c1c25689fb37f195fed87f4df0417ab421b397a0"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 28820366,
        "transactionHash": "0x9a61ec87f89bf2dd079a188d839730995dcb86c6386cabf1f83452f954339c5a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ffd3452efa0eda06f8f1f7e2442c3e075905ae3e",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013cd70b4272d0000000000000000000000000000000000000000000000000002add8150b25f3f00000000000000000000000000000000000000000000017151cfaec9fc9a1e5f7000000000000000000000000000000000000000000000000029a0aa456fec6f00000000000000000000000000000000000000000000017151d0eba107dc912f7",
        "logIndex": 222,
        "blockHash": "0x7fe7132dd112d8e287ceefb4c1c25689fb37f195fed87f4df0417ab421b397a0"
      }
    ],
    "blockNumber": 28820366,
    "cumulativeGasUsed": "9642757",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f718071e80118c79e0357d251ec2815d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SBT_ID\",\"type\":\"uint256\"}],\"name\":\"SBT_burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SBT_ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"SBT_mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SBT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sbtId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"Title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"SbtCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"DateOfIssue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"DeSocMembershipStatus\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"REPTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"RepTokenStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Issuer\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"RunsScored\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"WicketsTaken\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfCatches\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfRunOuts\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfStumpings\",\"type\":\"uint16\"}],\"internalType\":\"struct WAGMI_CUP_SBT.sbt\",\"name\":\"_sbt\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rep\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sbtInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"Title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"SbtCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"DateOfIssue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"DeSocMembershipStatus\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"REPTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"RepTokenStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Issuer\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"RunsScored\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"WicketsTaken\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfCatches\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfRunOuts\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfStumpings\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSbtID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSbtInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"Title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"SbtCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"DateOfIssue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"DeSocMembershipStatus\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"REPTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"RepTokenStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Issuer\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"RunsScored\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"WicketsTaken\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfCatches\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfRunOuts\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"NoOfStumpings\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WAGMI_CUP_SBT.sol\":\"WAGMI_CUP_SBT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MinterRole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\ncontract MinterRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private minters;\\r\\n\\r\\n    constructor() {\\r\\n        _addMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter(address sender) {\\r\\n        require(isMinter(sender));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return minters.has(account);\\r\\n    }\\r\\n\\r\\n    function addMinter(address account) public onlyMinter(msg.sender) {\\r\\n        _addMinter(account);\\r\\n    }\\r\\n\\r\\n    function renounceMinter() public {\\r\\n        _removeMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addMinter(address account) internal {\\r\\n        minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeMinter(address account) internal {\\r\\n        minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0b3c38a44cfdcd04936691556c9e6eab53a2ff63374dccda36caf160d52b6b73\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n  struct Role {\\r\\n    mapping (address => bool) bearer;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev give an account access to this role\\r\\n   */\\r\\n  function add(Role storage role, address account) internal {\\r\\n    require(account != address(0));\\r\\n    role.bearer[account] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev remove an account's access to this role\\r\\n   */\\r\\n  function remove(Role storage role, address account) internal {\\r\\n    require(account != address(0));\\r\\n    role.bearer[account] = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev check if an account has this role\\r\\n   * @return bool\\r\\n   */\\r\\n  function has(Role storage role, address account)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(account != address(0));\\r\\n    return role.bearer[account];\\r\\n  }\\r\\n}\",\"keccak256\":\"0xacb14328e74061aaf20c9187f36b6878b3193680206cc94f73c2fd424e8b5a76\",\"license\":\"GPL-3.0-or-later\"},\"contracts/WAGMI_CUP_SBT.sol\":{\"content\":\"//SPDX-License-Identifier:UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"./MinterRole.sol\\\";\\r\\n\\r\\ncontract  WAGMI_CUP_SBT is ERC721URIStorage, MinterRole {\\r\\n    address public owner;\\r\\n\\r\\n    struct sbt {\\r\\n        string Title;\\r\\n        string SbtCategory;\\r\\n        // uint256 SbtId; \\r\\n        string DateOfIssue;\\r\\n        string DeSocMembershipStatus;\\r\\n        uint256 REPTokens;\\r\\n        string RepTokenStatus;\\r\\n        string Issuer;\\r\\n        uint16 RunsScored;\\r\\n        uint16 WicketsTaken;\\r\\n        uint16 NoOfCatches;\\r\\n        uint16 NoOfRunOuts;\\r\\n        uint16 NoOfStumpings;\\r\\n    }\\r\\n\\r\\n    uint256 public SBT_ID = 1;\\r\\n    mapping(uint256 => sbt) public sbtInfo;\\r\\n    mapping(address => uint256) public userSbtID;\\r\\n    mapping(address => sbt) public userSbtInfo;\\r\\n    event SBT_mint(address minter, address receiver, uint256 SBT_ID, string tokenURI);\\r\\n    event SBT_burn(uint256 SBT_ID);\\r\\n\\r\\n    constructor() ERC721(\\\"WagmiCupPOAP_SoulBoundToken\\\", \\\"SBT\\\") {\\r\\n        owner = _msgSender();\\r\\n    }\\r\\n\\r\\n\\r\\n    function mint(address _to, sbt memory _sbt, uint256 rep, string memory _tokenURI)\\r\\n        external\\r\\n        onlyMinter(_msgSender())\\r\\n    {\\r\\n        _mint(_to, SBT_ID);\\r\\n        _setTokenURI(SBT_ID, _tokenURI);\\r\\n        _sbt.Title = \\\"WAGMI Cup POAP\\\";\\r\\n        _sbt.SbtCategory = \\\"Credential\\\";\\r\\n        // _sbt.SbtId =  SBT_ID;\\r\\n        _sbt.DateOfIssue = \\\"29th October 2022\\\";\\r\\n        _sbt.DeSocMembershipStatus = \\\"Inactive\\\";\\r\\n        _sbt.REPTokens = rep;\\r\\n        _sbt.RepTokenStatus = \\\"Unattested\\\";\\r\\n        _sbt.Issuer = \\\"EQ8 Desoc\\\";\\r\\n        userSbtID[_to] = SBT_ID;\\r\\n        sbtInfo[SBT_ID] = _sbt;\\r\\n        userSbtInfo[_to] = _sbt;\\r\\n\\r\\n        emit SBT_mint(owner, _to, SBT_ID,_tokenURI);\\r\\n        SBT_ID++;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _sbtId) external onlyMinter(_msgSender()) {\\r\\n        _burn(_sbtId);\\r\\n        emit SBT_burn(_sbtId);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _sbtId\\r\\n    ) internal override {\\r\\n        require(false, \\\"NON-transferable\\\");\\r\\n        super._transfer(from, to, _sbtId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xad0b8a4b129625bd6d1bd7388f69bab9e855e15bc9ff49e606e2888f0dd68152\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405260016009553480156200001657600080fd5b506040518060400160405280601b81526020017f5761676d69437570504f41505f536f756c426f756e64546f6b656e00000000008152506040518060400160405280600381526020017f534254000000000000000000000000000000000000000000000000000000000081525081600090805190602001906200009b92919062000220565b508060019080519060200190620000b492919062000220565b505050620000c8336200011e60201b60201c565b620000d86200017f60201b60201c565b600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000335565b620001398160076200018760201b62001a551790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001c257600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b8280546200022e90620002d0565b90600052602060002090601f0160209004810192826200025257600085556200029e565b82601f106200026d57805160ff19168380011785556200029e565b828001600101855582156200029e579182015b828111156200029d57825182559160200191906001019062000280565b5b509050620002ad9190620002b1565b5090565b5b80821115620002cc576000816000905550600101620002b2565b5090565b60006002820490506001821680620002e957607f821691505b602082108114156200030057620002ff62000306565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61403f80620003456000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80637a5c4ced116100c3578063a140f5641161007c578063a140f564146103c6578063a22cb465146103e2578063aa271e1a146103fe578063b88d4fde1461042e578063c87b56dd1461044a578063e985e9c51461047a5761014d565b80637a5c4ced146102f9578063899bc962146103295780638da5cb5b1461036457806395d89b4114610382578063983b2d56146103a057806398650275146103bc5761014d565b806323b872dd1161011557806323b872dd1461022757806342842e0e1461024357806342966c681461025f5780634af4b8351461027b5780636352211e1461029957806370a08231146102c95761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d05780631078bc42146101ec575b600080fd5b61016c6004803603810190610167919061318a565b6104aa565b6040516101799190613582565b60405180910390f35b61018a61058c565b604051610197919061359d565b60405180910390f35b6101ba60048036038101906101b591906131dc565b61061e565b6040516101c791906134cf565b60405180910390f35b6101ea60048036038101906101e5919061314e565b610664565b005b610206600480360381019061020191906131dc565b61077c565b60405161021e9c9b9a999897969594939291906135bf565b60405180910390f35b610241600480360381019061023c9190612fb5565b610b52565b005b61025d60048036038101906102589190612fb5565b610bb2565b005b610279600480360381019061027491906131dc565b610bd2565b005b610283610c30565b6040516102909190613843565b60405180910390f35b6102b360048036038101906102ae91906131dc565b610c36565b6040516102c091906134cf565b60405180910390f35b6102e360048036038101906102de9190612f50565b610ce8565b6040516102f09190613843565b60405180910390f35b610313600480360381019061030e9190612f50565b610da0565b6040516103209190613843565b60405180910390f35b610343600480360381019061033e9190612f50565b610db8565b60405161035b9c9b9a999897969594939291906135bf565b60405180910390f35b61036c61118e565b60405161037991906134cf565b60405180910390f35b61038a6111b4565b604051610397919061359d565b60405180910390f35b6103ba60048036038101906103b59190612f50565b611246565b005b6103c4611266565b005b6103e060048036038101906103db91906130bb565b611271565b005b6103fc60048036038101906103f7919061307f565b611819565b005b61041860048036038101906104139190612f50565b61182f565b6040516104259190613582565b60405180910390f35b61044860048036038101906104439190613004565b61184c565b005b610464600480360381019061045f91906131dc565b6118ae565b604051610471919061359d565b60405180910390f35b610494600480360381019061048f9190612f79565b6119c1565b6040516104a19190613582565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610585575061058482611aed565b5b9050919050565b60606000805461059b90613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546105c790613aa7565b80156106145780601f106105e957610100808354040283529160200191610614565b820191906000526020600020905b8154815290600101906020018083116105f757829003601f168201915b5050505050905090565b600061062982611b57565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061066f82610c36565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790613803565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106ff611ba2565b73ffffffffffffffffffffffffffffffffffffffff16148061072e575061072d81610728611ba2565b6119c1565b5b61076d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610764906137a3565b60405180910390fd5b6107778383611baa565b505050565b600a60205280600052604060002060009150905080600001805461079f90613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546107cb90613aa7565b80156108185780601f106107ed57610100808354040283529160200191610818565b820191906000526020600020905b8154815290600101906020018083116107fb57829003601f168201915b50505050509080600101805461082d90613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461085990613aa7565b80156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b5050505050908060020180546108bb90613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546108e790613aa7565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b50505050509080600301805461094990613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461097590613aa7565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b5050505050908060040154908060050180546109dd90613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0990613aa7565b8015610a565780601f10610a2b57610100808354040283529160200191610a56565b820191906000526020600020905b815481529060010190602001808311610a3957829003601f168201915b505050505090806006018054610a6b90613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9790613aa7565b8015610ae45780601f10610ab957610100808354040283529160200191610ae4565b820191906000526020600020905b815481529060010190602001808311610ac757829003601f168201915b5050505050908060070160009054906101000a900461ffff16908060070160029054906101000a900461ffff16908060070160049054906101000a900461ffff16908060070160069054906101000a900461ffff16908060070160089054906101000a900461ffff1690508c565b610b63610b5d611ba2565b82611c63565b610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9990613823565b60405180910390fd5b610bad838383611cf8565b505050565b610bcd8383836040518060200160405280600081525061184c565b505050565b610bda611ba2565b610be38161182f565b610bec57600080fd5b610bf582611d49565b7feca8247571dfad0823836f1b7be0b8fa6139bfc55e8ff7a1f23c405d5098800082604051610c249190613843565b60405180910390a15050565b60095481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd6906137e3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5090613763565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b6020528060005260406000206000915090505481565b600c602052806000526040600020600091509050806000018054610ddb90613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0790613aa7565b8015610e545780601f10610e2957610100808354040283529160200191610e54565b820191906000526020600020905b815481529060010190602001808311610e3757829003601f168201915b505050505090806001018054610e6990613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9590613aa7565b8015610ee25780601f10610eb757610100808354040283529160200191610ee2565b820191906000526020600020905b815481529060010190602001808311610ec557829003601f168201915b505050505090806002018054610ef790613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2390613aa7565b8015610f705780601f10610f4557610100808354040283529160200191610f70565b820191906000526020600020905b815481529060010190602001808311610f5357829003601f168201915b505050505090806003018054610f8590613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb190613aa7565b8015610ffe5780601f10610fd357610100808354040283529160200191610ffe565b820191906000526020600020905b815481529060010190602001808311610fe157829003601f168201915b50505050509080600401549080600501805461101990613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461104590613aa7565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b5050505050908060060180546110a790613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546110d390613aa7565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b5050505050908060070160009054906101000a900461ffff16908060070160029054906101000a900461ffff16908060070160049054906101000a900461ffff16908060070160069054906101000a900461ffff16908060070160089054906101000a900461ffff1690508c565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600180546111c390613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90613aa7565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050905090565b336112508161182f565b61125957600080fd5b61126282611d9c565b5050565b61126f33611df6565b565b611279611ba2565b6112828161182f565b61128b57600080fd5b61129785600954611e50565b6112a36009548361202a565b6040518060400160405280600e81526020017f5741474d492043757020504f415000000000000000000000000000000000000081525084600001819052506040518060400160405280600a81526020017f43726564656e7469616c0000000000000000000000000000000000000000000081525084602001819052506040518060400160405280601181526020017f32397468204f63746f626572203230323200000000000000000000000000000081525084604001819052506040518060400160405280600881526020017f496e6163746976650000000000000000000000000000000000000000000000008152508460600181905250828460800181815250506040518060400160405280600a81526020017f556e6174746573746564000000000000000000000000000000000000000000008152508460a001819052506040518060400160405280600981526020017f455138204465736f6300000000000000000000000000000000000000000000008152508460c00181905250600954600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600a600060095481526020019081526020016000206000820151816000019080519060200190611499929190612b71565b5060208201518160010190805190602001906114b6929190612b71565b5060408201518160020190805190602001906114d3929190612b71565b5060608201518160030190805190602001906114f0929190612b71565b506080820151816004015560a0820151816005019080519060200190611517929190612b71565b5060c0820151816006019080519060200190611534929190612b71565b5060e08201518160070160006101000a81548161ffff021916908361ffff1602179055506101008201518160070160026101000a81548161ffff021916908361ffff1602179055506101208201518160070160046101000a81548161ffff021916908361ffff1602179055506101408201518160070160066101000a81548161ffff021916908361ffff1602179055506101608201518160070160086101000a81548161ffff021916908361ffff16021790555090505083600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611647929190612b71565b506020820151816001019080519060200190611664929190612b71565b506040820151816002019080519060200190611681929190612b71565b50606082015181600301908051906020019061169e929190612b71565b506080820151816004015560a08201518160050190805190602001906116c5929190612b71565b5060c08201518160060190805190602001906116e2929190612b71565b5060e08201518160070160006101000a81548161ffff021916908361ffff1602179055506101008201518160070160026101000a81548161ffff021916908361ffff1602179055506101208201518160070160046101000a81548161ffff021916908361ffff1602179055506101408201518160070160066101000a81548161ffff021916908361ffff1602179055506101608201518160070160086101000a81548161ffff021916908361ffff1602179055509050507f2790adf9259dff0e92b44a3d3c932f91ca81181bfd8ce7c148c450e50a155cdc600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600954856040516117f29493929190613536565b60405180910390a16009600081548092919061180d90613b0a565b91905055505050505050565b61182b611824611ba2565b838361209e565b5050565b600061184582600761220b90919063ffffffff16565b9050919050565b61185d611857611ba2565b83611c63565b61189c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189390613823565b60405180910390fd5b6118a88484848461229d565b50505050565b60606118b982611b57565b60006006600084815260200190815260200160002080546118d990613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461190590613aa7565b80156119525780601f1061192757610100808354040283529160200191611952565b820191906000526020600020905b81548152906001019060200180831161193557829003601f168201915b5050505050905060006119636122f9565b90506000815114156119795781925050506119bc565b6000825111156119ae5780826040516020016119969291906134ab565b604051602081830303815290604052925050506119bc565b6119b784612310565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a8f57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611b6081612378565b611b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b96906137e3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c1d83610c36565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c6f83610c36565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cb15750611cb081856119c1565b5b80611cef57508373ffffffffffffffffffffffffffffffffffffffff16611cd78461061e565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b6000611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3090613743565b60405180910390fd5b611d448383836123e4565b505050565b611d528161264b565b6000600660008381526020019081526020016000208054611d7290613aa7565b905014611d9957600660008281526020019081526020016000206000611d989190612bf7565b5b50565b611db0816007611a5590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b611e0a81600761276890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb7906137c3565b60405180910390fd5b611ec981612378565b15611f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f00906136e3565b60405180910390fd5b611f1560008383612800565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f659190613928565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461202660008383612805565b5050565b61203382612378565b612072576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206990613783565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190612099929190612b71565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561210d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210490613723565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516121fe9190613582565b60405180910390a3505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561224657600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6122a8848484611cf8565b6122b48484848461280a565b6122f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ea906136a3565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061231b82611b57565b60006123256122f9565b905060008151116123455760405180602001604052806000815250612370565b8061234f846129a1565b6040516020016123609291906134ab565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b8273ffffffffffffffffffffffffffffffffffffffff1661240482610c36565b73ffffffffffffffffffffffffffffffffffffffff161461245a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612451906136c3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156124ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c190613703565b60405180910390fd5b6124d5838383612800565b6124e0600082611baa565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461253091906139af565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125879190613928565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612646838383612805565b505050565b600061265682610c36565b905061266481600084612800565b61266f600083611baa565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126bf91906139af565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461276481600084612805565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156127a257600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b505050565b505050565b600061282b8473ffffffffffffffffffffffffffffffffffffffff16612b4e565b15612994578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612854611ba2565b8786866040518563ffffffff1660e01b815260040161287694939291906134ea565b602060405180830381600087803b15801561289057600080fd5b505af19250505080156128c157506040513d601f19601f820116820180604052508101906128be91906131b3565b60015b612944573d80600081146128f1576040519150601f19603f3d011682016040523d82523d6000602084013e6128f6565b606091505b5060008151141561293c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612933906136a3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612999565b600190505b949350505050565b606060008214156129e9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612b49565b600082905060005b60008214612a1b578080612a0490613b0a565b915050600a82612a14919061397e565b91506129f1565b60008167ffffffffffffffff811115612a5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a8f5781602001600182028036833780820191505090505b5090505b60008514612b4257600182612aa891906139af565b9150600a85612ab79190613b53565b6030612ac39190613928565b60f81b818381518110612aff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612b3b919061397e565b9450612a93565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612b7d90613aa7565b90600052602060002090601f016020900481019282612b9f5760008555612be6565b82601f10612bb857805160ff1916838001178555612be6565b82800160010185558215612be6579182015b82811115612be5578251825591602001919060010190612bca565b5b509050612bf39190612c37565b5090565b508054612c0390613aa7565b6000825580601f10612c155750612c34565b601f016020900490600052602060002090810190612c339190612c37565b5b50565b5b80821115612c50576000816000905550600101612c38565b5090565b6000612c67612c6284613883565b61385e565b905082815260208101848484011115612c7f57600080fd5b612c8a848285613a65565b509392505050565b6000612ca5612ca0846138b4565b61385e565b905082815260208101848484011115612cbd57600080fd5b612cc8848285613a65565b509392505050565b600081359050612cdf81613f96565b92915050565b600081359050612cf481613fad565b92915050565b600081359050612d0981613fc4565b92915050565b600081519050612d1e81613fc4565b92915050565b600082601f830112612d3557600080fd5b8135612d45848260208601612c54565b91505092915050565b600082601f830112612d5f57600080fd5b8135612d6f848260208601612c92565b91505092915050565b60006101808284031215612d8b57600080fd5b612d9661018061385e565b9050600082013567ffffffffffffffff811115612db257600080fd5b612dbe84828501612d4e565b600083015250602082013567ffffffffffffffff811115612dde57600080fd5b612dea84828501612d4e565b602083015250604082013567ffffffffffffffff811115612e0a57600080fd5b612e1684828501612d4e565b604083015250606082013567ffffffffffffffff811115612e3657600080fd5b612e4284828501612d4e565b6060830152506080612e5684828501612f3b565b60808301525060a082013567ffffffffffffffff811115612e7657600080fd5b612e8284828501612d4e565b60a08301525060c082013567ffffffffffffffff811115612ea257600080fd5b612eae84828501612d4e565b60c08301525060e0612ec284828501612f26565b60e083015250610100612ed784828501612f26565b61010083015250610120612eed84828501612f26565b61012083015250610140612f0384828501612f26565b61014083015250610160612f1984828501612f26565b6101608301525092915050565b600081359050612f3581613fdb565b92915050565b600081359050612f4a81613ff2565b92915050565b600060208284031215612f6257600080fd5b6000612f7084828501612cd0565b91505092915050565b60008060408385031215612f8c57600080fd5b6000612f9a85828601612cd0565b9250506020612fab85828601612cd0565b9150509250929050565b600080600060608486031215612fca57600080fd5b6000612fd886828701612cd0565b9350506020612fe986828701612cd0565b9250506040612ffa86828701612f3b565b9150509250925092565b6000806000806080858703121561301a57600080fd5b600061302887828801612cd0565b945050602061303987828801612cd0565b935050604061304a87828801612f3b565b925050606085013567ffffffffffffffff81111561306757600080fd5b61307387828801612d24565b91505092959194509250565b6000806040838503121561309257600080fd5b60006130a085828601612cd0565b92505060206130b185828601612ce5565b9150509250929050565b600080600080608085870312156130d157600080fd5b60006130df87828801612cd0565b945050602085013567ffffffffffffffff8111156130fc57600080fd5b61310887828801612d78565b935050604061311987828801612f3b565b925050606085013567ffffffffffffffff81111561313657600080fd5b61314287828801612d4e565b91505092959194509250565b6000806040838503121561316157600080fd5b600061316f85828601612cd0565b925050602061318085828601612f3b565b9150509250929050565b60006020828403121561319c57600080fd5b60006131aa84828501612cfa565b91505092915050565b6000602082840312156131c557600080fd5b60006131d384828501612d0f565b91505092915050565b6000602082840312156131ee57600080fd5b60006131fc84828501612f3b565b91505092915050565b61320e816139e3565b82525050565b61321d816139f5565b82525050565b600061322e826138e5565b61323881856138fb565b9350613248818560208601613a74565b61325181613c40565b840191505092915050565b6000613267826138f0565b613271818561390c565b9350613281818560208601613a74565b61328a81613c40565b840191505092915050565b60006132a0826138f0565b6132aa818561391d565b93506132ba818560208601613a74565b80840191505092915050565b60006132d360328361390c565b91506132de82613c51565b604082019050919050565b60006132f660258361390c565b915061330182613ca0565b604082019050919050565b6000613319601c8361390c565b915061332482613cef565b602082019050919050565b600061333c60248361390c565b915061334782613d18565b604082019050919050565b600061335f60198361390c565b915061336a82613d67565b602082019050919050565b600061338260108361390c565b915061338d82613d90565b602082019050919050565b60006133a560298361390c565b91506133b082613db9565b604082019050919050565b60006133c8602e8361390c565b91506133d382613e08565b604082019050919050565b60006133eb603e8361390c565b91506133f682613e57565b604082019050919050565b600061340e60208361390c565b915061341982613ea6565b602082019050919050565b600061343160188361390c565b915061343c82613ecf565b602082019050919050565b600061345460218361390c565b915061345f82613ef8565b604082019050919050565b6000613477602e8361390c565b915061348282613f47565b604082019050919050565b61349681613a2d565b82525050565b6134a581613a5b565b82525050565b60006134b78285613295565b91506134c38284613295565b91508190509392505050565b60006020820190506134e46000830184613205565b92915050565b60006080820190506134ff6000830187613205565b61350c6020830186613205565b613519604083018561349c565b818103606083015261352b8184613223565b905095945050505050565b600060808201905061354b6000830187613205565b6135586020830186613205565b613565604083018561349c565b8181036060830152613577818461325c565b905095945050505050565b60006020820190506135976000830184613214565b92915050565b600060208201905081810360008301526135b7818461325c565b905092915050565b60006101808201905081810360008301526135da818f61325c565b905081810360208301526135ee818e61325c565b90508181036040830152613602818d61325c565b90508181036060830152613616818c61325c565b9050613625608083018b61349c565b81810360a0830152613637818a61325c565b905081810360c083015261364b818961325c565b905061365a60e083018861348d565b61366861010083018761348d565b61367661012083018661348d565b61368461014083018561348d565b61369261016083018461348d565b9d9c50505050505050505050505050565b600060208201905081810360008301526136bc816132c6565b9050919050565b600060208201905081810360008301526136dc816132e9565b9050919050565b600060208201905081810360008301526136fc8161330c565b9050919050565b6000602082019050818103600083015261371c8161332f565b9050919050565b6000602082019050818103600083015261373c81613352565b9050919050565b6000602082019050818103600083015261375c81613375565b9050919050565b6000602082019050818103600083015261377c81613398565b9050919050565b6000602082019050818103600083015261379c816133bb565b9050919050565b600060208201905081810360008301526137bc816133de565b9050919050565b600060208201905081810360008301526137dc81613401565b9050919050565b600060208201905081810360008301526137fc81613424565b9050919050565b6000602082019050818103600083015261381c81613447565b9050919050565b6000602082019050818103600083015261383c8161346a565b9050919050565b6000602082019050613858600083018461349c565b92915050565b6000613868613879565b90506138748282613ad9565b919050565b6000604051905090565b600067ffffffffffffffff82111561389e5761389d613c11565b5b6138a782613c40565b9050602081019050919050565b600067ffffffffffffffff8211156138cf576138ce613c11565b5b6138d882613c40565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061393382613a5b565b915061393e83613a5b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561397357613972613b84565b5b828201905092915050565b600061398982613a5b565b915061399483613a5b565b9250826139a4576139a3613bb3565b5b828204905092915050565b60006139ba82613a5b565b91506139c583613a5b565b9250828210156139d8576139d7613b84565b5b828203905092915050565b60006139ee82613a3b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613a92578082015181840152602081019050613a77565b83811115613aa1576000848401525b50505050565b60006002820490506001821680613abf57607f821691505b60208210811415613ad357613ad2613be2565b5b50919050565b613ae282613c40565b810181811067ffffffffffffffff82111715613b0157613b00613c11565b5b80604052505050565b6000613b1582613a5b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b4857613b47613b84565b5b600182019050919050565b6000613b5e82613a5b565b9150613b6983613a5b565b925082613b7957613b78613bb3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4e4f4e2d7472616e7366657261626c6500000000000000000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b613f9f816139e3565b8114613faa57600080fd5b50565b613fb6816139f5565b8114613fc157600080fd5b50565b613fcd81613a01565b8114613fd857600080fd5b50565b613fe481613a2d565b8114613fef57600080fd5b50565b613ffb81613a5b565b811461400657600080fd5b5056fea2646970667358221220d2e81b0c58721106bfa417ae55f7a30f4c23f8fdd62f36874109cc124a40d79264736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80637a5c4ced116100c3578063a140f5641161007c578063a140f564146103c6578063a22cb465146103e2578063aa271e1a146103fe578063b88d4fde1461042e578063c87b56dd1461044a578063e985e9c51461047a5761014d565b80637a5c4ced146102f9578063899bc962146103295780638da5cb5b1461036457806395d89b4114610382578063983b2d56146103a057806398650275146103bc5761014d565b806323b872dd1161011557806323b872dd1461022757806342842e0e1461024357806342966c681461025f5780634af4b8351461027b5780636352211e1461029957806370a08231146102c95761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d05780631078bc42146101ec575b600080fd5b61016c6004803603810190610167919061318a565b6104aa565b6040516101799190613582565b60405180910390f35b61018a61058c565b604051610197919061359d565b60405180910390f35b6101ba60048036038101906101b591906131dc565b61061e565b6040516101c791906134cf565b60405180910390f35b6101ea60048036038101906101e5919061314e565b610664565b005b610206600480360381019061020191906131dc565b61077c565b60405161021e9c9b9a999897969594939291906135bf565b60405180910390f35b610241600480360381019061023c9190612fb5565b610b52565b005b61025d60048036038101906102589190612fb5565b610bb2565b005b610279600480360381019061027491906131dc565b610bd2565b005b610283610c30565b6040516102909190613843565b60405180910390f35b6102b360048036038101906102ae91906131dc565b610c36565b6040516102c091906134cf565b60405180910390f35b6102e360048036038101906102de9190612f50565b610ce8565b6040516102f09190613843565b60405180910390f35b610313600480360381019061030e9190612f50565b610da0565b6040516103209190613843565b60405180910390f35b610343600480360381019061033e9190612f50565b610db8565b60405161035b9c9b9a999897969594939291906135bf565b60405180910390f35b61036c61118e565b60405161037991906134cf565b60405180910390f35b61038a6111b4565b604051610397919061359d565b60405180910390f35b6103ba60048036038101906103b59190612f50565b611246565b005b6103c4611266565b005b6103e060048036038101906103db91906130bb565b611271565b005b6103fc60048036038101906103f7919061307f565b611819565b005b61041860048036038101906104139190612f50565b61182f565b6040516104259190613582565b60405180910390f35b61044860048036038101906104439190613004565b61184c565b005b610464600480360381019061045f91906131dc565b6118ae565b604051610471919061359d565b60405180910390f35b610494600480360381019061048f9190612f79565b6119c1565b6040516104a19190613582565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610585575061058482611aed565b5b9050919050565b60606000805461059b90613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546105c790613aa7565b80156106145780601f106105e957610100808354040283529160200191610614565b820191906000526020600020905b8154815290600101906020018083116105f757829003601f168201915b5050505050905090565b600061062982611b57565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061066f82610c36565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790613803565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106ff611ba2565b73ffffffffffffffffffffffffffffffffffffffff16148061072e575061072d81610728611ba2565b6119c1565b5b61076d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610764906137a3565b60405180910390fd5b6107778383611baa565b505050565b600a60205280600052604060002060009150905080600001805461079f90613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546107cb90613aa7565b80156108185780601f106107ed57610100808354040283529160200191610818565b820191906000526020600020905b8154815290600101906020018083116107fb57829003601f168201915b50505050509080600101805461082d90613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461085990613aa7565b80156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b5050505050908060020180546108bb90613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546108e790613aa7565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b50505050509080600301805461094990613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461097590613aa7565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b5050505050908060040154908060050180546109dd90613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0990613aa7565b8015610a565780601f10610a2b57610100808354040283529160200191610a56565b820191906000526020600020905b815481529060010190602001808311610a3957829003601f168201915b505050505090806006018054610a6b90613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9790613aa7565b8015610ae45780601f10610ab957610100808354040283529160200191610ae4565b820191906000526020600020905b815481529060010190602001808311610ac757829003601f168201915b5050505050908060070160009054906101000a900461ffff16908060070160029054906101000a900461ffff16908060070160049054906101000a900461ffff16908060070160069054906101000a900461ffff16908060070160089054906101000a900461ffff1690508c565b610b63610b5d611ba2565b82611c63565b610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9990613823565b60405180910390fd5b610bad838383611cf8565b505050565b610bcd8383836040518060200160405280600081525061184c565b505050565b610bda611ba2565b610be38161182f565b610bec57600080fd5b610bf582611d49565b7feca8247571dfad0823836f1b7be0b8fa6139bfc55e8ff7a1f23c405d5098800082604051610c249190613843565b60405180910390a15050565b60095481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd6906137e3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5090613763565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b6020528060005260406000206000915090505481565b600c602052806000526040600020600091509050806000018054610ddb90613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0790613aa7565b8015610e545780601f10610e2957610100808354040283529160200191610e54565b820191906000526020600020905b815481529060010190602001808311610e3757829003601f168201915b505050505090806001018054610e6990613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9590613aa7565b8015610ee25780601f10610eb757610100808354040283529160200191610ee2565b820191906000526020600020905b815481529060010190602001808311610ec557829003601f168201915b505050505090806002018054610ef790613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2390613aa7565b8015610f705780601f10610f4557610100808354040283529160200191610f70565b820191906000526020600020905b815481529060010190602001808311610f5357829003601f168201915b505050505090806003018054610f8590613aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb190613aa7565b8015610ffe5780601f10610fd357610100808354040283529160200191610ffe565b820191906000526020600020905b815481529060010190602001808311610fe157829003601f168201915b50505050509080600401549080600501805461101990613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461104590613aa7565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b5050505050908060060180546110a790613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546110d390613aa7565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b5050505050908060070160009054906101000a900461ffff16908060070160029054906101000a900461ffff16908060070160049054906101000a900461ffff16908060070160069054906101000a900461ffff16908060070160089054906101000a900461ffff1690508c565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600180546111c390613aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90613aa7565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050905090565b336112508161182f565b61125957600080fd5b61126282611d9c565b5050565b61126f33611df6565b565b611279611ba2565b6112828161182f565b61128b57600080fd5b61129785600954611e50565b6112a36009548361202a565b6040518060400160405280600e81526020017f5741474d492043757020504f415000000000000000000000000000000000000081525084600001819052506040518060400160405280600a81526020017f43726564656e7469616c0000000000000000000000000000000000000000000081525084602001819052506040518060400160405280601181526020017f32397468204f63746f626572203230323200000000000000000000000000000081525084604001819052506040518060400160405280600881526020017f496e6163746976650000000000000000000000000000000000000000000000008152508460600181905250828460800181815250506040518060400160405280600a81526020017f556e6174746573746564000000000000000000000000000000000000000000008152508460a001819052506040518060400160405280600981526020017f455138204465736f6300000000000000000000000000000000000000000000008152508460c00181905250600954600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600a600060095481526020019081526020016000206000820151816000019080519060200190611499929190612b71565b5060208201518160010190805190602001906114b6929190612b71565b5060408201518160020190805190602001906114d3929190612b71565b5060608201518160030190805190602001906114f0929190612b71565b506080820151816004015560a0820151816005019080519060200190611517929190612b71565b5060c0820151816006019080519060200190611534929190612b71565b5060e08201518160070160006101000a81548161ffff021916908361ffff1602179055506101008201518160070160026101000a81548161ffff021916908361ffff1602179055506101208201518160070160046101000a81548161ffff021916908361ffff1602179055506101408201518160070160066101000a81548161ffff021916908361ffff1602179055506101608201518160070160086101000a81548161ffff021916908361ffff16021790555090505083600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611647929190612b71565b506020820151816001019080519060200190611664929190612b71565b506040820151816002019080519060200190611681929190612b71565b50606082015181600301908051906020019061169e929190612b71565b506080820151816004015560a08201518160050190805190602001906116c5929190612b71565b5060c08201518160060190805190602001906116e2929190612b71565b5060e08201518160070160006101000a81548161ffff021916908361ffff1602179055506101008201518160070160026101000a81548161ffff021916908361ffff1602179055506101208201518160070160046101000a81548161ffff021916908361ffff1602179055506101408201518160070160066101000a81548161ffff021916908361ffff1602179055506101608201518160070160086101000a81548161ffff021916908361ffff1602179055509050507f2790adf9259dff0e92b44a3d3c932f91ca81181bfd8ce7c148c450e50a155cdc600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600954856040516117f29493929190613536565b60405180910390a16009600081548092919061180d90613b0a565b91905055505050505050565b61182b611824611ba2565b838361209e565b5050565b600061184582600761220b90919063ffffffff16565b9050919050565b61185d611857611ba2565b83611c63565b61189c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189390613823565b60405180910390fd5b6118a88484848461229d565b50505050565b60606118b982611b57565b60006006600084815260200190815260200160002080546118d990613aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461190590613aa7565b80156119525780601f1061192757610100808354040283529160200191611952565b820191906000526020600020905b81548152906001019060200180831161193557829003601f168201915b5050505050905060006119636122f9565b90506000815114156119795781925050506119bc565b6000825111156119ae5780826040516020016119969291906134ab565b604051602081830303815290604052925050506119bc565b6119b784612310565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a8f57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611b6081612378565b611b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b96906137e3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c1d83610c36565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c6f83610c36565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cb15750611cb081856119c1565b5b80611cef57508373ffffffffffffffffffffffffffffffffffffffff16611cd78461061e565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b6000611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3090613743565b60405180910390fd5b611d448383836123e4565b505050565b611d528161264b565b6000600660008381526020019081526020016000208054611d7290613aa7565b905014611d9957600660008281526020019081526020016000206000611d989190612bf7565b5b50565b611db0816007611a5590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b611e0a81600761276890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb7906137c3565b60405180910390fd5b611ec981612378565b15611f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f00906136e3565b60405180910390fd5b611f1560008383612800565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f659190613928565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461202660008383612805565b5050565b61203382612378565b612072576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206990613783565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190612099929190612b71565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561210d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210490613723565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516121fe9190613582565b60405180910390a3505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561224657600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6122a8848484611cf8565b6122b48484848461280a565b6122f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ea906136a3565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061231b82611b57565b60006123256122f9565b905060008151116123455760405180602001604052806000815250612370565b8061234f846129a1565b6040516020016123609291906134ab565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b8273ffffffffffffffffffffffffffffffffffffffff1661240482610c36565b73ffffffffffffffffffffffffffffffffffffffff161461245a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612451906136c3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156124ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c190613703565b60405180910390fd5b6124d5838383612800565b6124e0600082611baa565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461253091906139af565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125879190613928565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612646838383612805565b505050565b600061265682610c36565b905061266481600084612800565b61266f600083611baa565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126bf91906139af565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461276481600084612805565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156127a257600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b505050565b505050565b600061282b8473ffffffffffffffffffffffffffffffffffffffff16612b4e565b15612994578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612854611ba2565b8786866040518563ffffffff1660e01b815260040161287694939291906134ea565b602060405180830381600087803b15801561289057600080fd5b505af19250505080156128c157506040513d601f19601f820116820180604052508101906128be91906131b3565b60015b612944573d80600081146128f1576040519150601f19603f3d011682016040523d82523d6000602084013e6128f6565b606091505b5060008151141561293c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612933906136a3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612999565b600190505b949350505050565b606060008214156129e9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612b49565b600082905060005b60008214612a1b578080612a0490613b0a565b915050600a82612a14919061397e565b91506129f1565b60008167ffffffffffffffff811115612a5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a8f5781602001600182028036833780820191505090505b5090505b60008514612b4257600182612aa891906139af565b9150600a85612ab79190613b53565b6030612ac39190613928565b60f81b818381518110612aff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612b3b919061397e565b9450612a93565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612b7d90613aa7565b90600052602060002090601f016020900481019282612b9f5760008555612be6565b82601f10612bb857805160ff1916838001178555612be6565b82800160010185558215612be6579182015b82811115612be5578251825591602001919060010190612bca565b5b509050612bf39190612c37565b5090565b508054612c0390613aa7565b6000825580601f10612c155750612c34565b601f016020900490600052602060002090810190612c339190612c37565b5b50565b5b80821115612c50576000816000905550600101612c38565b5090565b6000612c67612c6284613883565b61385e565b905082815260208101848484011115612c7f57600080fd5b612c8a848285613a65565b509392505050565b6000612ca5612ca0846138b4565b61385e565b905082815260208101848484011115612cbd57600080fd5b612cc8848285613a65565b509392505050565b600081359050612cdf81613f96565b92915050565b600081359050612cf481613fad565b92915050565b600081359050612d0981613fc4565b92915050565b600081519050612d1e81613fc4565b92915050565b600082601f830112612d3557600080fd5b8135612d45848260208601612c54565b91505092915050565b600082601f830112612d5f57600080fd5b8135612d6f848260208601612c92565b91505092915050565b60006101808284031215612d8b57600080fd5b612d9661018061385e565b9050600082013567ffffffffffffffff811115612db257600080fd5b612dbe84828501612d4e565b600083015250602082013567ffffffffffffffff811115612dde57600080fd5b612dea84828501612d4e565b602083015250604082013567ffffffffffffffff811115612e0a57600080fd5b612e1684828501612d4e565b604083015250606082013567ffffffffffffffff811115612e3657600080fd5b612e4284828501612d4e565b6060830152506080612e5684828501612f3b565b60808301525060a082013567ffffffffffffffff811115612e7657600080fd5b612e8284828501612d4e565b60a08301525060c082013567ffffffffffffffff811115612ea257600080fd5b612eae84828501612d4e565b60c08301525060e0612ec284828501612f26565b60e083015250610100612ed784828501612f26565b61010083015250610120612eed84828501612f26565b61012083015250610140612f0384828501612f26565b61014083015250610160612f1984828501612f26565b6101608301525092915050565b600081359050612f3581613fdb565b92915050565b600081359050612f4a81613ff2565b92915050565b600060208284031215612f6257600080fd5b6000612f7084828501612cd0565b91505092915050565b60008060408385031215612f8c57600080fd5b6000612f9a85828601612cd0565b9250506020612fab85828601612cd0565b9150509250929050565b600080600060608486031215612fca57600080fd5b6000612fd886828701612cd0565b9350506020612fe986828701612cd0565b9250506040612ffa86828701612f3b565b9150509250925092565b6000806000806080858703121561301a57600080fd5b600061302887828801612cd0565b945050602061303987828801612cd0565b935050604061304a87828801612f3b565b925050606085013567ffffffffffffffff81111561306757600080fd5b61307387828801612d24565b91505092959194509250565b6000806040838503121561309257600080fd5b60006130a085828601612cd0565b92505060206130b185828601612ce5565b9150509250929050565b600080600080608085870312156130d157600080fd5b60006130df87828801612cd0565b945050602085013567ffffffffffffffff8111156130fc57600080fd5b61310887828801612d78565b935050604061311987828801612f3b565b925050606085013567ffffffffffffffff81111561313657600080fd5b61314287828801612d4e565b91505092959194509250565b6000806040838503121561316157600080fd5b600061316f85828601612cd0565b925050602061318085828601612f3b565b9150509250929050565b60006020828403121561319c57600080fd5b60006131aa84828501612cfa565b91505092915050565b6000602082840312156131c557600080fd5b60006131d384828501612d0f565b91505092915050565b6000602082840312156131ee57600080fd5b60006131fc84828501612f3b565b91505092915050565b61320e816139e3565b82525050565b61321d816139f5565b82525050565b600061322e826138e5565b61323881856138fb565b9350613248818560208601613a74565b61325181613c40565b840191505092915050565b6000613267826138f0565b613271818561390c565b9350613281818560208601613a74565b61328a81613c40565b840191505092915050565b60006132a0826138f0565b6132aa818561391d565b93506132ba818560208601613a74565b80840191505092915050565b60006132d360328361390c565b91506132de82613c51565b604082019050919050565b60006132f660258361390c565b915061330182613ca0565b604082019050919050565b6000613319601c8361390c565b915061332482613cef565b602082019050919050565b600061333c60248361390c565b915061334782613d18565b604082019050919050565b600061335f60198361390c565b915061336a82613d67565b602082019050919050565b600061338260108361390c565b915061338d82613d90565b602082019050919050565b60006133a560298361390c565b91506133b082613db9565b604082019050919050565b60006133c8602e8361390c565b91506133d382613e08565b604082019050919050565b60006133eb603e8361390c565b91506133f682613e57565b604082019050919050565b600061340e60208361390c565b915061341982613ea6565b602082019050919050565b600061343160188361390c565b915061343c82613ecf565b602082019050919050565b600061345460218361390c565b915061345f82613ef8565b604082019050919050565b6000613477602e8361390c565b915061348282613f47565b604082019050919050565b61349681613a2d565b82525050565b6134a581613a5b565b82525050565b60006134b78285613295565b91506134c38284613295565b91508190509392505050565b60006020820190506134e46000830184613205565b92915050565b60006080820190506134ff6000830187613205565b61350c6020830186613205565b613519604083018561349c565b818103606083015261352b8184613223565b905095945050505050565b600060808201905061354b6000830187613205565b6135586020830186613205565b613565604083018561349c565b8181036060830152613577818461325c565b905095945050505050565b60006020820190506135976000830184613214565b92915050565b600060208201905081810360008301526135b7818461325c565b905092915050565b60006101808201905081810360008301526135da818f61325c565b905081810360208301526135ee818e61325c565b90508181036040830152613602818d61325c565b90508181036060830152613616818c61325c565b9050613625608083018b61349c565b81810360a0830152613637818a61325c565b905081810360c083015261364b818961325c565b905061365a60e083018861348d565b61366861010083018761348d565b61367661012083018661348d565b61368461014083018561348d565b61369261016083018461348d565b9d9c50505050505050505050505050565b600060208201905081810360008301526136bc816132c6565b9050919050565b600060208201905081810360008301526136dc816132e9565b9050919050565b600060208201905081810360008301526136fc8161330c565b9050919050565b6000602082019050818103600083015261371c8161332f565b9050919050565b6000602082019050818103600083015261373c81613352565b9050919050565b6000602082019050818103600083015261375c81613375565b9050919050565b6000602082019050818103600083015261377c81613398565b9050919050565b6000602082019050818103600083015261379c816133bb565b9050919050565b600060208201905081810360008301526137bc816133de565b9050919050565b600060208201905081810360008301526137dc81613401565b9050919050565b600060208201905081810360008301526137fc81613424565b9050919050565b6000602082019050818103600083015261381c81613447565b9050919050565b6000602082019050818103600083015261383c8161346a565b9050919050565b6000602082019050613858600083018461349c565b92915050565b6000613868613879565b90506138748282613ad9565b919050565b6000604051905090565b600067ffffffffffffffff82111561389e5761389d613c11565b5b6138a782613c40565b9050602081019050919050565b600067ffffffffffffffff8211156138cf576138ce613c11565b5b6138d882613c40565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061393382613a5b565b915061393e83613a5b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561397357613972613b84565b5b828201905092915050565b600061398982613a5b565b915061399483613a5b565b9250826139a4576139a3613bb3565b5b828204905092915050565b60006139ba82613a5b565b91506139c583613a5b565b9250828210156139d8576139d7613b84565b5b828203905092915050565b60006139ee82613a3b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613a92578082015181840152602081019050613a77565b83811115613aa1576000848401525b50505050565b60006002820490506001821680613abf57607f821691505b60208210811415613ad357613ad2613be2565b5b50919050565b613ae282613c40565b810181811067ffffffffffffffff82111715613b0157613b00613c11565b5b80604052505050565b6000613b1582613a5b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b4857613b47613b84565b5b600182019050919050565b6000613b5e82613a5b565b9150613b6983613a5b565b925082613b7957613b78613bb3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4e4f4e2d7472616e7366657261626c6500000000000000000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b613f9f816139e3565b8114613faa57600080fd5b50565b613fb6816139f5565b8114613fc157600080fd5b50565b613fcd81613a01565b8114613fd857600080fd5b50565b613fe481613a2d565b8114613fef57600080fd5b50565b613ffb81613a5b565b811461400657600080fd5b5056fea2646970667358221220d2e81b0c58721106bfa417ae55f7a30f4c23f8fdd62f36874109cc124a40d79264736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 178,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 182,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 186,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 190,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 196,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1164,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2212,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "minters",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Role)2679_storage"
      },
      {
        "astId": 2771,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2799,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "SBT_ID",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2804,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "sbtInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(sbt)2796_storage)"
      },
      {
        "astId": 2808,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "userSbtID",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2813,
        "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
        "label": "userSbtInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(sbt)2796_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(sbt)2796_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WAGMI_CUP_SBT.sbt)",
        "numberOfBytes": "32",
        "value": "t_struct(sbt)2796_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(sbt)2796_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WAGMI_CUP_SBT.sbt)",
        "numberOfBytes": "32",
        "value": "t_struct(sbt)2796_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Role)2679_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2678,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(sbt)2796_storage": {
        "encoding": "inplace",
        "label": "struct WAGMI_CUP_SBT.sbt",
        "members": [
          {
            "astId": 2773,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "Title",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2775,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "SbtCategory",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2777,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "DateOfIssue",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2779,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "DeSocMembershipStatus",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2781,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "REPTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2783,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "RepTokenStatus",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2785,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "Issuer",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2787,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "RunsScored",
            "offset": 0,
            "slot": "7",
            "type": "t_uint16"
          },
          {
            "astId": 2789,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "WicketsTaken",
            "offset": 2,
            "slot": "7",
            "type": "t_uint16"
          },
          {
            "astId": 2791,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "NoOfCatches",
            "offset": 4,
            "slot": "7",
            "type": "t_uint16"
          },
          {
            "astId": 2793,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "NoOfRunOuts",
            "offset": 6,
            "slot": "7",
            "type": "t_uint16"
          },
          {
            "astId": 2795,
            "contract": "contracts/WAGMI_CUP_SBT.sol:WAGMI_CUP_SBT",
            "label": "NoOfStumpings",
            "offset": 8,
            "slot": "7",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}